import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

API_TOKEN = os.getenv("BOT_TOKEN")  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∞ –∏–ª–∏ —á–µ—Ä–µ–∑ .env

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –í–æ–ø—Ä–æ—Å—ã (–∑–∞–ø–æ–ª–Ω–∏ –¥–æ 14 —à—Ç—É–∫ –ø–æ —Å–≤–æ–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é)
questions = [
    {
        "text": "–¢—ã —Å–∫–æ—Ä–µ–µ...",
        "options": [
            {"emoji": "üîß", "text": "–õ—é–±–ª—é –∏–∑–æ–±—Ä–µ—Ç–∞—Ç—å –∏ —á–∏–Ω–∏—Ç—å", "value": "—Ç–µ—Ö–Ω–∞—Ä—å"},
            {"emoji": "üí¨", "text": "–û–±—â–∞—é—Å—å —Å –ª—é–¥—å–º–∏ –∏ —Ä—É–∫–æ–≤–æ–∂—É", "value": "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å"},
            {"emoji": "üé≠", "text": "–ú–µ—á—Ç–∞—é –∏ —Å–æ–∑–¥–∞—é –∏—Å–∫—É—Å—Å—Ç–≤–æ", "value": "—Ç–≤–æ—Ä–µ—Ü"},
            {"emoji": "üí™", "text": "–†–∞–±–æ—Ç–∞—é —Ä—É–∫–∞–º–∏, –º–Ω–µ –Ω–µ —Å—Ç—Ä–∞—à–µ–Ω —Ç—Ä—É–¥", "value": "—Ä–∞–±–æ—á–∏–π"}
        ]
    },
    # –î–æ–±–∞–≤—å —Ç—É—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ 13 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç–æ–º—É –∂–µ —à–∞–±–ª–æ–Ω—É!
    # ...
]

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_progress = {}

def get_keyboard(options):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for opt in options:
        kb.add(KeyboardButton(f"{opt['emoji']} {opt['text']}"))
    return kb

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
async def ask_question(message, q_num):
    if q_num >= len(questions):
        await message.answer("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç üèÜ", reply_markup=types.ReplyKeyboardRemove())
        return

    q = questions[q_num]
    text = f"–í–æ–ø—Ä–æ—Å {q_num+1} –∏–∑ {len(questions)}:\n{q['text']}"
    kb = get_keyboard(q["options"])
    await message.answer(text, reply_markup=kb)
    user_progress[message.from_user.id] = q_num

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ ¬´–ü–ª—ë–Ω–∫–∞ —Å—É–¥—å–±—ã¬ª\n–¢–µ—Å—Ç –∏–∑ 14 –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞–∂–µ—Ç, –∫–µ–º –±—ã —Ç—ã –±—ã–ª(–∞) –≤ XX –≤–µ–∫–µ.")
    await asyncio.sleep(1.5)
    await ask_question(message, 0)

@dp.message_handler(lambda message: message.text and message.from_user.id in user_progress)
async def handle_answer(message: types.Message):
    q_num = user_progress[message.from_user.id]
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ask_question(message, q_num + 1)

if __name__ == "__main__":
    executor.start_polling(dp)